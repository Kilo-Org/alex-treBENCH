name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # =============================================================================
  # Code Quality Checks
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run linting
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff src/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff src/ tests/

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports
        continue-on-error: true

  # =============================================================================
  # Unit Tests
  # =============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --durations=10

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results/
            htmlcov/
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # Integration Tests
  # =============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # End-to-End Tests
  # =============================================================================
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v --tb=short
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # Performance Tests
  # =============================================================================
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --tb=short --durations=0

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            simulation_results/
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # System Validation
  # =============================================================================
  validate:
    name: System Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run system validation
        run: |
          python scripts/validate_system.py

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report
          path: system_validation_report.json
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # Security Scan
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # =============================================================================
  # Docker Build & Test
  # =============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: alex-trebench:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Test Docker image
        run: |
          # Test that the container starts and basic commands work
          docker run --rm alex-trebench python --version
          docker run --rm alex-trebench python -c "import sys; print('Python works')"

  # =============================================================================
  # Coverage Report
  # =============================================================================
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          pytest tests/unit/ tests/integration/ --cov=src/ --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          if-no-files-found: warn
          overwrite: true

  # =============================================================================
  # Release (only on main branch)
  # =============================================================================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-integration, test-e2e, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI (if configured)
        run: |
          # Uncomment and configure for PyPI publishing
          # twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
          echo "PyPI publishing not configured - manual release required"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated release from CI/CD pipeline
            - All tests passed
            - Code quality checks passed
            - Docker image built successfully

            ## Installation
            ```bash
            pip install alex-trebench
            ```

            ## Docker
            ```bash
            docker pull alex-trebench:latest
            ```
          draft: false
          prerelease: false
          files: |
            dist/*

  # =============================================================================
  # Summary Report
  # =============================================================================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      [
        quality,
        test-unit,
        test-integration,
        test-e2e,
        test-performance,
        validate,
        security,
        docker,
        coverage,
      ]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "🧠 Jeopardy Benchmarking System - CI/CD Summary"
          echo "=============================================="
          echo ""
          echo "Quality Checks: ${{ needs.quality.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Performance Tests: ${{ needs.test-performance.result }}"
          echo "System Validation: ${{ needs.validate.result }}"
          echo "Security Scan: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker.result }}"
          echo "Coverage Report: ${{ needs.coverage.result }}"
          echo ""

          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.test-unit.result }}" == "success" && \
                "${{ needs.test-integration.result }}" == "success" && \
                "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "✅ All critical checks passed!"
            echo "🚀 Ready for deployment"
          else
            echo "❌ Some checks failed - review the logs above"
            echo "🔧 Fix issues before deploying"
            exit 1
          fi
